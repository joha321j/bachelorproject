// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ComponentModel;

namespace ApplicationCore.Models.AppInsights.Events
{
    /// <summary> The EventType. </summary>
    public readonly partial struct EventType : IEquatable<EventType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="EventType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public EventType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string AllValue = "$all";
        private const string TracesValue = "traces";
        private const string CustomEventsValue = "customEvents";
        private const string PageViewsValue = "pageViews";
        private const string BrowserTimingsValue = "browserTimings";
        private const string RequestsValue = "requests";
        private const string DependenciesValue = "dependencies";
        private const string ExceptionsValue = "exceptions";
        private const string AvailabilityResultsValue = "availabilityResults";
        private const string PerformanceCountersValue = "performanceCounters";
        private const string CustomMetricsValue = "customMetrics";

        /// <summary> $all. </summary>
        public static EventType All { get; } = new EventType(AllValue);
        /// <summary> traces. </summary>
        public static EventType Traces { get; } = new EventType(TracesValue);
        /// <summary> customEvents. </summary>
        public static EventType CustomEvents { get; } = new EventType(CustomEventsValue);
        /// <summary> pageViews. </summary>
        public static EventType PageViews { get; } = new EventType(PageViewsValue);
        /// <summary> browserTimings. </summary>
        public static EventType BrowserTimings { get; } = new EventType(BrowserTimingsValue);
        /// <summary> requests. </summary>
        public static EventType Requests { get; } = new EventType(RequestsValue);
        /// <summary> dependencies. </summary>
        public static EventType Dependencies { get; } = new EventType(DependenciesValue);
        /// <summary> exceptions. </summary>
        public static EventType Exceptions { get; } = new EventType(ExceptionsValue);
        /// <summary> availabilityResults. </summary>
        public static EventType AvailabilityResults { get; } = new EventType(AvailabilityResultsValue);
        /// <summary> performanceCounters. </summary>
        public static EventType PerformanceCounters { get; } = new EventType(PerformanceCountersValue);
        /// <summary> customMetrics. </summary>
        public static EventType CustomMetrics { get; } = new EventType(CustomMetricsValue);
        /// <summary> Determines if two <see cref="EventType"/> values are the same. </summary>
        public static bool operator ==(EventType left, EventType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="EventType"/> values are not the same. </summary>
        public static bool operator !=(EventType left, EventType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="EventType"/>. </summary>
        public static implicit operator EventType(string value) => new EventType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is EventType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(EventType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
