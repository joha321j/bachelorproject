// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.ComponentModel;

namespace ApplicationCore.Models.AppInsights.Metrics
{
    /// <summary> The MetricId. </summary>
    public readonly partial struct MetricId : IEquatable<MetricId>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="MetricId"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public MetricId(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string RequestsCountValue = "requests/count";
        private const string RequestsDurationValue = "requests/duration";
        private const string RequestsFailedValue = "requests/failed";
        private const string UsersCountValue = "users/count";
        private const string UsersAuthenticatedValue = "users/authenticated";
        private const string PageViewsCountValue = "pageViews/count";
        private const string PageViewsDurationValue = "pageViews/duration";
        private const string ClientProcessingDurationValue = "client/processingDuration";
        private const string ClientReceiveDurationValue = "client/receiveDuration";
        private const string ClientNetworkDurationValue = "client/networkDuration";
        private const string ClientSendDurationValue = "client/sendDuration";
        private const string ClientTotalDurationValue = "client/totalDuration";
        private const string DependenciesCountValue = "dependencies/count";
        private const string DependenciesFailedValue = "dependencies/failed";
        private const string DependenciesDurationValue = "dependencies/duration";
        private const string ExceptionsCountValue = "exceptions/count";
        private const string ExceptionsBrowserValue = "exceptions/browser";
        private const string ExceptionsServerValue = "exceptions/server";
        private const string SessionsCountValue = "sessions/count";
        private const string PerformanceCountersRequestExecutionTimeValue = "performanceCounters/requestExecutionTime";
        private const string PerformanceCountersRequestsPerSecondValue = "performanceCounters/requestsPerSecond";
        private const string PerformanceCountersRequestsInQueueValue = "performanceCounters/requestsInQueue";
        private const string PerformanceCountersMemoryAvailableBytesValue = "performanceCounters/memoryAvailableBytes";
        private const string PerformanceCountersExceptionsPerSecondValue = "performanceCounters/exceptionsPerSecond";
        private const string PerformanceCountersProcessCpuPercentageValue = "performanceCounters/processCpuPercentage";
        private const string PerformanceCountersProcessIOBytesPerSecondValue = "performanceCounters/processIOBytesPerSecond";
        private const string PerformanceCountersProcessPrivateBytesValue = "performanceCounters/processPrivateBytes";
        private const string PerformanceCountersProcessorCpuPercentageValue = "performanceCounters/processorCpuPercentage";
        private const string AvailabilityResultsAvailabilityPercentageValue = "availabilityResults/availabilityPercentage";
        private const string AvailabilityResultsDurationValue = "availabilityResults/duration";
        private const string BillingTelemetryCountValue = "billing/telemetryCount";
        private const string CustomEventsCountValue = "customEvents/count";

        /// <summary> requests/count. </summary>
        public static MetricId RequestsCount { get; } = new MetricId(RequestsCountValue);
        /// <summary> requests/duration. </summary>
        public static MetricId RequestsDuration { get; } = new MetricId(RequestsDurationValue);
        /// <summary> requests/failed. </summary>
        public static MetricId RequestsFailed { get; } = new MetricId(RequestsFailedValue);
        /// <summary> users/count. </summary>
        public static MetricId UsersCount { get; } = new MetricId(UsersCountValue);
        /// <summary> users/authenticated. </summary>
        public static MetricId UsersAuthenticated { get; } = new MetricId(UsersAuthenticatedValue);
        /// <summary> pageViews/count. </summary>
        public static MetricId PageViewsCount { get; } = new MetricId(PageViewsCountValue);
        /// <summary> pageViews/duration. </summary>
        public static MetricId PageViewsDuration { get; } = new MetricId(PageViewsDurationValue);
        /// <summary> client/processingDuration. </summary>
        public static MetricId ClientProcessingDuration { get; } = new MetricId(ClientProcessingDurationValue);
        /// <summary> client/receiveDuration. </summary>
        public static MetricId ClientReceiveDuration { get; } = new MetricId(ClientReceiveDurationValue);
        /// <summary> client/networkDuration. </summary>
        public static MetricId ClientNetworkDuration { get; } = new MetricId(ClientNetworkDurationValue);
        /// <summary> client/sendDuration. </summary>
        public static MetricId ClientSendDuration { get; } = new MetricId(ClientSendDurationValue);
        /// <summary> client/totalDuration. </summary>
        public static MetricId ClientTotalDuration { get; } = new MetricId(ClientTotalDurationValue);
        /// <summary> dependencies/count. </summary>
        public static MetricId DependenciesCount { get; } = new MetricId(DependenciesCountValue);
        /// <summary> dependencies/failed. </summary>
        public static MetricId DependenciesFailed { get; } = new MetricId(DependenciesFailedValue);
        /// <summary> dependencies/duration. </summary>
        public static MetricId DependenciesDuration { get; } = new MetricId(DependenciesDurationValue);
        /// <summary> exceptions/count. </summary>
        public static MetricId ExceptionsCount { get; } = new MetricId(ExceptionsCountValue);
        /// <summary> exceptions/browser. </summary>
        public static MetricId ExceptionsBrowser { get; } = new MetricId(ExceptionsBrowserValue);
        /// <summary> exceptions/server. </summary>
        public static MetricId ExceptionsServer { get; } = new MetricId(ExceptionsServerValue);
        /// <summary> sessions/count. </summary>
        public static MetricId SessionsCount { get; } = new MetricId(SessionsCountValue);
        /// <summary> performanceCounters/requestExecutionTime. </summary>
        public static MetricId PerformanceCountersRequestExecutionTime { get; } = new MetricId(PerformanceCountersRequestExecutionTimeValue);
        /// <summary> performanceCounters/requestsPerSecond. </summary>
        public static MetricId PerformanceCountersRequestsPerSecond { get; } = new MetricId(PerformanceCountersRequestsPerSecondValue);
        /// <summary> performanceCounters/requestsInQueue. </summary>
        public static MetricId PerformanceCountersRequestsInQueue { get; } = new MetricId(PerformanceCountersRequestsInQueueValue);
        /// <summary> performanceCounters/memoryAvailableBytes. </summary>
        public static MetricId PerformanceCountersMemoryAvailableBytes { get; } = new MetricId(PerformanceCountersMemoryAvailableBytesValue);
        /// <summary> performanceCounters/exceptionsPerSecond. </summary>
        public static MetricId PerformanceCountersExceptionsPerSecond { get; } = new MetricId(PerformanceCountersExceptionsPerSecondValue);
        /// <summary> performanceCounters/processCpuPercentage. </summary>
        public static MetricId PerformanceCountersProcessCpuPercentage { get; } = new MetricId(PerformanceCountersProcessCpuPercentageValue);
        /// <summary> performanceCounters/processIOBytesPerSecond. </summary>
        public static MetricId PerformanceCountersProcessIOBytesPerSecond { get; } = new MetricId(PerformanceCountersProcessIOBytesPerSecondValue);
        /// <summary> performanceCounters/processPrivateBytes. </summary>
        public static MetricId PerformanceCountersProcessPrivateBytes { get; } = new MetricId(PerformanceCountersProcessPrivateBytesValue);
        /// <summary> performanceCounters/processorCpuPercentage. </summary>
        public static MetricId PerformanceCountersProcessorCpuPercentage { get; } = new MetricId(PerformanceCountersProcessorCpuPercentageValue);
        /// <summary> availabilityResults/availabilityPercentage. </summary>
        public static MetricId AvailabilityResultsAvailabilityPercentage { get; } = new MetricId(AvailabilityResultsAvailabilityPercentageValue);
        /// <summary> availabilityResults/duration. </summary>
        public static MetricId AvailabilityResultsDuration { get; } = new MetricId(AvailabilityResultsDurationValue);
        /// <summary> billing/telemetryCount. </summary>
        public static MetricId BillingTelemetryCount { get; } = new MetricId(BillingTelemetryCountValue);
        /// <summary> customEvents/count. </summary>
        public static MetricId CustomEventsCount { get; } = new MetricId(CustomEventsCountValue);
        /// <summary> Determines if two <see cref="MetricId"/> values are the same. </summary>
        public static bool operator ==(MetricId left, MetricId right) => left.Equals(right);
        /// <summary> Determines if two <see cref="MetricId"/> values are not the same. </summary>
        public static bool operator !=(MetricId left, MetricId right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="MetricId"/>. </summary>
        public static implicit operator MetricId(string value) => new MetricId(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is MetricId other && Equals(other);
        /// <inheritdoc />
        public bool Equals(MetricId other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
